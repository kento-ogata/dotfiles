[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'FileType'
hook_post_update = 'TSUpdate'
hook_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
      enable = true,
      disable = { "help" },
    },
    indent = {
      enable = true,
      disable = { "yaml" },
    },
}
EOF
'''

[[plugins]]
repo = 'lewis6991/nvim-treesitter-context'
on_source = 'nvim-treesitter'
hook_source = '''
lua << EOF
require('treesitter-context').setup{
  enable = true,
  throttle = true,
  max_lines = 0,
  patterns = {
    default = {
      'class',
      'function',
      'method',
      'for',
      'while',
      'if',
      'switch',
      'case',
    },
  }
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = 'nvim-treesitter'
on_cmd = 'TSPlaygroundToggle'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = 'FileType'
hook_add = '''
let g:cursorword = 1
let g:cursorword_highlight = 1
autocmd MyAutoCmd FileType toml let b:cursorword = 0
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = '''
call vimrc#lexima#setup()
'''

[[plugins]]
repo = 'hrsh7th/vim-searchx'
on_func = 'searchx#start'
hook_add = '''
nnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>

nnoremap N <Cmd>call searchx#prev()<CR>
nnoremap n <Cmd>call searchx#next()<CR>
'''
hook_source = '''
let g:searchx = {}
" auto jump if the recent input matches to any marker.
let g:searchx.auto_accept = v:true
" The scrolloff value for moving to next/prev.
let g:searchx.scrolloff = &scrolloff
" To diable scrolling animation.
let g:searchx.scrolltime = 0
" To enable auto nohlsearch after cursor is moved
let g:searchx.nohlsearch = {}
let g:searchx.nohlsearch.jump = v:true
" Marker characters.
let g:searchx.markers = split('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '.\zs')
" Convert searchx pattern.
function g:searchx.convert(input) abort
    if a:input !~# '\k'
        return '\V' .. a:input
    endif
    return a:input[0] .. substitute(a:input[1:], '\\\@<! ', '.\\{-}', 'g')
endfunction
'''

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = ['<Plug>(eft-f-repeatable)', '<Plug>(eft-F-repeatable)', '<Plug>(eft-t-repeatable)', '<Plug>(eft-T-repeatable)']
hook_add = '''
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)

nmap t <Plug>(eft-t-repeatable)
xmap t <Plug>(eft-t-repeatable)
omap t <Plug>(eft-t-repeatable)
nmap T <Plug>(eft-T-repeatable)
xmap T <Plug>(eft-T-repeatable)
omap T <Plug>(eft-T-repeatable)

let g:eft_ignorecase = v:true

"              __         _       __
" match to camelCase and IInterfaceClass
function s:eft_camel(state, text, index) abort
  return (a:text[a:index] =~# '\u' && a:text[a:index + 1] =~# '\U') || (a:text[a:index] =~# '\U' && a:text[a:index + 1] =~# '\u')
endfunction

let g:eft_index_function = {
    \   'head': function('eft#index#head'),
    \   'tail': function('eft#index#tail'),
    \   'camel': function('s:eft_camel'),
    \   'space': function('eft#index#space'),
    \   'symbol': function('eft#index#symbol'),
    \ }
'''

[[plugins]]
repo = 'twitvim/twitvim'
on_cmd = ['FriendsTwitter', 'PosttoTwitter', 'BPosttoTwitter', 'CPosttoTwitter']

#[[plugins]]
#repo = 'rmagatti/auto-session'
#if = 'has("nvim")'
#on_event = 'VimEnter'
#hook_source = '''
#lua << EOF
#require('auto-session').setup {
#    log_level = 'error',
#    auto_session_enable_last_session = false,
#    auto_session_enabled = true,
#    auto_save_enabled = true,
#    auto_restore_enabled = true,
#}
#EOF
#'''

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'
if = '!dein#tap("nvim-treesitter")'
on_ft = ['vim','toml']
hook_source = '''
syntax on
'''

[[plugins]]
repo = 'jlcrochet/vim-razor'
on_ft = ['razor']
merge_ftdetect = true

[[plugins]]
repo = 'PhilT/vim-fsharp'
on_ft = 'fsharp'
merge_ftdetect = true

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
on_map = '<Plug>(ctrlp)'
hook_add = '''
nmap <C-p> <Plug>(ctrlp)
'''

[[plugins]]
repo = 'mattn/ctrlp-matchfuzzy'
if = 'exists("*matchfuzzy")'
on_source = 'ctrlp.vim'
hook_source = '''
let g:ctrlp_match_func = { 'match': 'ctrlp_matchfuzzy#matcher' }
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
autocmd MyAutoCmd FileType rust nmap <buffer><silent> <C-e> <Cmd>RustRun<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'razor']


[[plugins]]
repo = '4513ECHO/rogue.nvim'
if = "has('nvim')"
on_cmd = 'Rogue'

[[plugins]]
repo = 'skanehira/denops-docker.vim'
depends = 'denops.vim'
on_cmd = 'Docker*'

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_func = 'vsnip#'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
if = 'has("win32")&&has("nvim")'
on_cmd = 'Telescope'
hook_add = '''
nmap ;f <Cmd>Telescope find_file<CR>
nmap ;g <Cmd>Telescope live_grep<CR>
nmap ;b <Cmd>Telescope buffers<CR>
nmap ;h <Cmd>Telescope help_tags<CR>
nmap ;s <Cmd>Telescope treesitter<CR>
nmap ;n <Cmd>Telescope resume<CR>
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = ['<Plug>(sandwich-', '<Plug>(textobj-sandwich-']
hook_add = '''
let g:sandwich_no_default_key_mappings = v:true
nmap s    <Plug>(sandwich-add)
xmap s    <Plug>(sandwich-add)
nmap ds   <Plug>(sandwich-delete)
nmap dsb  <Plug>(sandwich-delete-auto)
nmap r    <Nop>
nmap rs   <Plug>(sandwich-replace)
nmap rsb  <Plug>(sandwich-delete-auto)

omap ib   <Plug>(textobj-sandwich-auto-i)
xmap ib   <Plug>(textobj-sandwich-auto-i)
omap ab   <Plug>(textobj-sandwich-auto-a)
xmap ab   <Plug>(textobj-sandwich-auto-a)
omap ia   <Plug>(textobj-sandwich-auto-i)
xmap ia   <Plug>(textobj-sandwich-auto-i)
omap aa   <Plug>(textobj-sandwich-auto-a)
xmap aa   <Plug>(textobj-sandwich-auto-a)
'''

