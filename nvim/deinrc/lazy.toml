[[plugins]]
repo = 'vim-denops/denops.vim'
lazy = 0
merged = 0

[[plugins]]
repo = 'rhysd/committia.vim'
ft = 'gitcommit'
on_event = 'BufReadPost'
hook_add = '''
augroup GitSpellCheck
    autocmd!
    autocmd FileType gitcommit setlocal spell
augroup END

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    setlocal spell
    setlocal spelllang+=cjk

    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction

let g:committia_open_only_vim_starting = 1
let g:committia_use_singlecolumn = 'fallback'
let g:committia_min_window_size = 160
let g:committia_status_window_opencmd = 'belowright split'
let g:committia_diff_window_opencmd = 'botright vsplit'
let g:committia_singlecolumn_diff_window_opencmd = 'belowright split'
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = { enable = true },
}
EOF
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
if = 'has("nvim")'
depends = 'plenary.nvim'
on_map = { n = '<Cmd>Telescope' }
hook_add = '''
nnoremap <Leader>ff <Cmd>Telescope find_files<CR>
nnoremap <Leader>fg <Cmd>Telescope live_grep<CR>
nnoremap <Leader>fb <Cmd>Telescope buffers<CR>
nnoremap <Leader>fh <Cmd>Telescope help_tags<CR>
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = 'FileType'
hook_add = '''
let g:cursorword = 1
let g:cursorword_highlight = 1
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = 'InsertEnter'
hook_add = '''
nmap s <Nop>
xmap s <Nop>
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = """
" { before, input, after }
" | is cursor position.
call lexima#add_rule({'char': '<Tab>', 'at': '\%#)', 'leave': 1})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#"', 'leave': 1})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#''', 'leave': 1})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#]', 'leave': 1})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#}', 'leave': 1})

" cs:
" { |, $, $"|" }
call lexima#add_rule({'char': '$', 'input': '$\"', 'input_after': '\"', 'filetype': ['cs','razor']})

" html:
" { |, <, <|> }
call lexima#add_rule({'char': '<', 'input': '<', 'input_after': '>', 'filetype': ['html', 'razor']})
" { <input type="text"|>, <Tab>, <input type="text">|</input> }
" { <input type="text"/|>, <Tab>, <input type="text"/>| }
call lexima#add_rule({'char': '<Tab>', 'at': '<[^<]*\%#[^>]*>', 'leave': 1, 'filetype': ['html','razor']})
call lexima#add_rule({
    \ 'char': '<Tab>',
    \ 'at': '<\(\w\+\)[^>]*[^\/]\%#>',
    \ 'leave': 1,
    \ 'input_after': '</\1>',
    \ 'with_submatch': 1,
    \ 'filetype': ['html','razor']})
" { <|>, <BS>, | }
call lexima#add_rule({'char': '<BS>', 'at': '<\%#>', 'input': '<BS>', 'delete': 1, 'filetype': ['html', 'razor']})
" { <input type|>, =, <input type="|"> }
call lexima#add_rule({'char': '=', 'at': '<[^<]*\%#[^>]*>', 'input': '=\"', 'input_after': '\"', 'filetype': ['html','razor']})
" {
"   <div>|</div>,
"   <CR>,
"   <div>
"     |
"   </div>
" }
call lexima#add_rule({
    \ 'char': '<CR>',
    \ 'at': '>\%#<',
    \ 'input': '<CR>',
    \ 'input_after': '<CR>',
    \ 'filetype': ['html', 'razor']})

" markdown itemization rules
call lexima#add_rule({'char': '<CR>', 'at': '^\s*- \S\+\%#$', 'input': '<CR>- ', 'filetype': 'markdown'})
call lexima#add_rule({'char': '<CR>', 'at': '^\s\+- \%#$', 'input': '<BS><BS><BS>- ', 'filetype': 'markdown'})
call lexima#add_rule({'char': '<CR>', 'at': '^- \%#$', 'input': '<BS><BS>', 'filetype': 'markdown'})
call lexima#add_rule({'char': '-', 'at': '- \%#$', 'input': '<BS><BS>  - ', 'filetype': 'markdown'})
"""

[[plugins]]
repo = 'hrsh7th/vim-searchx'
if = 'has("nvim-0.5")'
on_map = { n = '<Cmd>call searchx#start' }
hook_add = '''
nnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>

nnoremap N <Cmd>call searchx#prev()<CR>
nnoremap n <Cmd>call searchx#next()<CR>
'''
hook_source = '''
let g:searchx = {}
" auto jump if the recent input matches to any marker.
let g:searchx.auto_accept = v:true
" The scrolloff value for moving to next/prev.
let g:searchx.scrolloff = &scrolloff
" To diable scrolling animation.
let g:searchx.scrolltime = 0
" To enable auto nohlsearch after cursor is moved
let g:searchx.nohlsearch = {}
let g:searchx.nohlsearch.jump = v:true
" Marker characters.
let g:searchx.markers = split('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '.\zs')
" Convert searchx pattern.
function g:searchx.convert(input) abort
    if a:input !~# '\k'
        return '\V' .. a:input
    endif
    return a:input[0] .. substitute(a:input[1:], '\\\@<! ', '.\\{-}', 'g')
endfunction
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
nmap <CR> <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'twitvim/twitvim'
if = 'has("python3")'
on_event = 'CmdlineEnter'

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
