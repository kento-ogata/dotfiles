[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'rhysd/committia.vim'
on_path = ['COMMIT_EDITMSG', 'MERGE_MSG']
hook_add = '''
augroup GitSpellCheck
    autocmd!
    autocmd FileType gitcommit setlocal spell
augroup END

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    setlocal spell
    setlocal spelllang+=cjk
endfunction

let g:committia_open_only_vim_starting = 1
let g:committia_use_singlecolumn = 'fallback'
let g:committia_min_window_size = 160
let g:committia_status_window_opencmd = 'belowright split'
let g:committia_diff_window_opencmd = 'botright vsplit'
let g:committia_singlecolumn_diff_window_opencmd = 'belowright split'
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        disable = { "vim" },
        enable = true
    },
}
EOF
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
if = 'has("nvim")'
depends = ['plenary.nvim', 'nvim-web-devicons']
on_cmd = 'Telescope'
hook_add = '''
nmap ; <Nop>
nmap ;f     <Cmd>Telescope find_files<CR>
nmap ;q     <Cmd>Telescope live_grep<CR>
nmap ;b     <Cmd>Telescope buffers<CR>
nmap ;h     <Cmd>Telescope help_tags<CR>
nmap ;t     <Cmd>Telescope treesitter<CR>
nmap ;s     <Cmd>Telescope current_buffer_fuzzy_find<CR>
nmap ;n     <Cmd>Telescope resume<CR><Esc>
nmap ;gG    <Cmd>Telescope git_commits<CR>
nmap ;gg    <Cmd>Telescope git_bcommits<CR>
nmap ;gb    <Cmd>Telescope git_branches<CR>
nmap ;ga    <Cmd>Telescope git_status<CR>
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_event = 'FileType'
hook_add = '''
let g:cursorword = 1
let g:cursorword_highlight = 1
autocmd MyAutoCmd FileType toml let b:cursorword = 0
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = """
" { before, input, after }
" | is cursor position.
call lexima#add_rule({'char': '<Tab>', 'at': '\%#\s*)', 'leave': ')'})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#\s*"', 'leave': '"'})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#\s*''', 'leave': ''''})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#\s*]', 'leave': ']'})
call lexima#add_rule({'char': '<Tab>', 'at': '\%#\s*}', 'leave': '}'})

call lexima#add_rule({'char': '<CR>', 'at': '\%#''''''', 'input': '<CR>', 'input_after': '<CR>', 'filetype': 'toml'})

" cs:
" { |, $, $"|" }
call lexima#add_rule({'char': '$', 'input': '$\"', 'input_after': '\"', 'filetype': ['cs','razor']})

" html:
" { |, <, <|> }
call lexima#add_rule({'char': '<', 'input': '<', 'input_after': '>', 'filetype': ['html', 'razor']})
" { <input type="text"/|>, <Tab>, <input type="text"/>| }
call lexima#add_rule({'char': '<Tab>', 'at': '\%#>', 'leave': '>', 'filetype': ['html','razor']})
" { <input type="text"|>, <Tab>, <input type="text">|</input> }
call lexima#add_rule({
    \ 'char': '<Tab>',
    \ 'at': '<\(\w\+\)\s[^>]\+[^\/]\%#>',
    \ 'leave': '>',
    \ 'input_after': '</\1>',
    \ 'with_submatch': 1,
    \ 'filetype': ['html','razor']})
" { <div|>, <Tab>, <div>|</div> }
call lexima#add_rule({
    \ 'char': '<Tab>',
    \ 'at': '<\(\w\+\)\%#>',
    \ 'leave': '>',
    \ 'input_after': '</\1>',
    \ 'with_submatch': 1,
    \ 'filetype': ['html', 'razor']})
" { <|>, <BS>, | }
call lexima#add_rule({'char': '<BS>', 'at': '<\%#>', 'input': '<BS>', 'delete': '>', 'filetype': ['html', 'razor']})
" { <input type|>, =, <input type="|"> }
call lexima#add_rule({'char': '=', 'at': '<[^>]\+\s\w\+\%#>', 'input': '=\"', 'input_after': '\"', 'filetype': ['html','razor']})
" { |</div>, <Tab>, </div>| }
call lexima#add_rule({
    \ 'char': '<Tab>',
    \ 'at': '\%#<\/\w\+>',
    \ 'leave': '>',
    \ 'filetype': ['html', 'razor']
    \ })
" {
"   <div>|</div>,
"   <CR>,
"   <div>
"     |
"   </div>
" }
call lexima#add_rule({
    \ 'char': '<CR>',
    \ 'at': '>\%#<',
    \ 'input': '<CR>',
    \ 'input_after': '<CR>',
    \ 'filetype': ['html', 'razor']})

" markdown itemization rules
call lexima#add_rule({'char': '<CR>', 'at': '^\s*- \S\+\%#$', 'input': '<CR>- ', 'filetype': 'markdown'})
call lexima#add_rule({'char': '<CR>', 'at': '^\s\+- \%#$', 'input': '<BS><BS><BS>- ', 'filetype': 'markdown'})
call lexima#add_rule({'char': '<CR>', 'at': '^- \%#$', 'input': '<BS><BS>', 'filetype': 'markdown'})
call lexima#add_rule({'char': '-', 'at': '- \%#$', 'input': '<BS><BS>  - ', 'filetype': 'markdown'})
"""

[[plugins]]
repo = 'hrsh7th/vim-searchx'
on_func = 'searchx#start'
hook_add = '''
nnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>

nnoremap N <Cmd>call searchx#prev()<CR>
nnoremap n <Cmd>call searchx#next()<CR>
'''
hook_source = '''
let g:searchx = {}
" auto jump if the recent input matches to any marker.
let g:searchx.auto_accept = v:true
" The scrolloff value for moving to next/prev.
let g:searchx.scrolloff = &scrolloff
" To diable scrolling animation.
let g:searchx.scrolltime = 0
" To enable auto nohlsearch after cursor is moved
let g:searchx.nohlsearch = {}
let g:searchx.nohlsearch.jump = v:true
" Marker characters.
let g:searchx.markers = split('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '.\zs')
" Convert searchx pattern.
function g:searchx.convert(input) abort
    if a:input !~# '\k'
        return '\V' .. a:input
    endif
    return a:input[0] .. substitute(a:input[1:], '\\\@<! ', '.\\{-}', 'g')
endfunction
'''

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = ['<Plug>(eft-f-repeatable)', '<Plug>(eft-F-repeatable)', '<Plug>(eft-t-repeatable)', '<Plug>(eft-T-repeatable)']
hook_add = '''
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)

nmap t <Plug>(eft-t-repeatable)
xmap t <Plug>(eft-t-repeatable)
omap t <Plug>(eft-t-repeatable)
nmap T <Plug>(eft-T-repeatable)
xmap T <Plug>(eft-T-repeatable)
omap T <Plug>(eft-T-repeatable)

let g:eft_ignorecase = v:true
'''

[[plugins]]
repo = 'twitvim/twitvim'
if = 'has("python3")'
on_cmd = ['FriendsTwitter', 'PosttoTwitter', 'BPosttoTwitter', 'CPosttoTwitter']

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
nmap <Leader>aA <Cmd>Gina changes HEAD<CR>
nmap <Leader>ac <Cmd>Gina commit<CR>
nmap <Leader>aC <Cmd>Gina commit --amend<CR>
nmap <Leader>at <Cmd>Gina tag<CR>
nmap <Leader>ag <Cmd>Gina grep<CR>
nmap <Leader>aq <Cmd>Gina qrep<CR>
nmap <Leader>ad <Cmd>Gina changes origin/HEAD...<CR>
nmap <Leader>ah <Cmd>Gina log --graph<CR>
nmap <Leader>aH <Cmd>Gina log --graph --all<CR>
nmap <Leader>al <Cmd>Gina log<CR>
nmap <Leader>aL <Cmd>Gina log :%<CR>
nmap <Leader>af <Cmd>Gina ls<CR>

autocmd MyAutoCmd FileType gina-commit setlocal spell
'''
hook_source = '''
call gina#custom#command#option(
    \ 'commit', '-v|--verbose'
    \ )
'''

[[plugins]]
repo = 'lambdalisue/gin.vim'
depends = 'denops.vim'
on_cmd = ['Gin', 'GinBranch', 'GinChaperon', 'GinDiff', 'GinEdit', 'GinPatch', 'GinStatus']
hook_add = '''
nmap <Leader>aa <Cmd>GinStatus<CR>
nmap <Leader>ab <Cmd>GinBranch<CR>
'''

[plugins.ftplugin]
gin-status = '''
autocmd MyAutoCmd FileType gin-status setlocal nobuflisted
'''
gin-branch = '''
autocmd MyAutoCmd FileType gin-branch setlocal nobuflisted
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = 'Fern'
hook_add = '''
nmap ;e <Cmd>Fern . -reveal=%<CR>
let g:fern#hide_cursor = v:true
let g:fern#keepalt_on_edit = v:true
let g:fern#default_hidden = v:true
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = 'nerdfont.vim'
on_source = 'fern.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
on_source = 'fern.vim'
hook_source = '''
call fern_git_status#init()
'''

[[plugins]]
repo = 'lambdalisue/fern-mapping-git.vim'
on_source = 'fern.vim'

#[[plugins]]
#repo = 'rmagatti/auto-session'
#if = 'has("nvim")'
#on_event = 'VimEnter'
#hook_source = '''
#lua << EOF
#require('auto-session').setup {
#    log_level = 'error',
#    auto_session_enable_last_session = false,
#    auto_session_enabled = true,
#    auto_save_enabled = true,
#    auto_restore_enabled = true,
#}
#EOF
#'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = { n = '<Plug>(git-messenger)' }
hook_add = '''
let g:git_messenger_no_default_mappings = v:true
nmap <Leader>mp <Plug>(git-messenger)
'''

[[plugins]]
repo = 'vim-jp/syntax-vim-ex'
#on_ft = ['vim','toml']
hook_source = '''
syntax on
'''

[[plugins]]
repo = 'jlcrochet/vim-razor'
on_ft = ['razor']

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
if = 'has("nvim")'
on_event = 'BufReadPost'
hook_add = '''
set signcolumn=yes
'''
hook_source = '''
lua << EOF
local gitsigns = require('gitsigns')
gitsigns.setup {
    signs = {
    add          = {hl = 'GitSignsAdd'   , text = '+', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
    change       = {hl = 'GitSignsChange', text = '|', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
    delete       = {hl = 'GitSignsDelete', text = '_', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
    topdelete    = {hl = 'GitSignsDelete', text = 'â€¾', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
    changedelete = {hl = 'GitSignsChange', text = '~', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
    },
    signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
    numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
    linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
    word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
    watch_gitdir = {
    interval = 1000,
    follow_files = true
    },
    attach_to_untracked = true,
    current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
    current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
    delay = 1000,
    ignore_whitespace = false,
    },
    current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
    sign_priority = 6,
    update_debounce = 100,
    status_formatter = nil, -- Use default
    max_file_length = 40000,
    preview_config = {
    -- Options passed to nvim_open_win
    border = 'single',
    style = 'minimal',
    relative = 'cursor',
    row = 0,
    col = 1
    },
    yadm = {
    enable = false
    },
    on_attach = function(bufnr)
      local function map(mode, lhs, rhs, opts)
        opts = vim.tbl_extend('force', {noremap = true, silent = true}, opts or {})
        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)
      end
    
      -- Navigation
      map('n', ']c', "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'", {expr=true})
      map('n', '[c', "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'", {expr=true})
    
      -- Actions
      map('n', '<leader>hs', ':Gitsigns stage_hunk<CR>')
      map('n', '<leader>hS', '<cmd>Gitsigns undo_stage_hunk<CR>')
      map('n', '<leader>hu', ':Gitsigns reset_hunk<CR>')
      map('n', '<leader>hp', '<cmd>Gitsigns preview_hunk<CR>')
      map('n', '<leader>hb', '<cmd>lua require"gitsigns".blame_line{full=true}<CR>')
      map('n', '<leader>tb', '<cmd>Gitsigns toggle_current_line_blame<CR>')
      map('n', '<leader>hd', '<cmd>Gitsigns diffthis<CR>')
      map('n', '<leader>hD', '<cmd>lua require"gitsigns".diffthis("~")<CR>')
      map('n', '<leader>td', '<cmd>Gitsigns toggle_deleted<CR>')
    
      -- Text object
      map('o', 'ih', ':<C-U>Gitsigns select_hunk<CR>')
      map('x', 'ih', ':<C-U>Gitsigns select_hunk<CR>')
    end
}
EOF
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
on_map = '<Plug>(ctrlp)'
hook_add = '''
nmap <C-p> <Plug>(ctrlp)
'''

[[plugins]]
repo = 'mattn/ctrlp-matchfuzzy'
if = 'exists("*matchfuzzy")'
on_source = 'ctrlp.vim'
hook_source = '''
let g:ctrlp_match_func = { 'match': 'ctrlp_matchfuzzy#matcher' }
'''
