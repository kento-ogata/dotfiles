[[plugins]]
repo = 'Shougo/ddc.vim'
if = 'g:vimrc#use_ddc'
depends = ['denops.vim', 'pum.vim']
on_event = 'InsertEnter'
hook_source = '''
call ddc#custom#patch_global(
    \ 'sources', has('nvim') ?
    \ ['nvim-lsp', 'treesitter', 'around', 'file', 'rg'] :
    \ ['around', 'file', 'rg'],
    \ )
call ddc#custom#patch_global(
    \ 'cmdlineSources',
    \ ['cmdline']
    \ )

call ddc#custom#patch_global('sourceOptions', {
    \ '_' : {
    \   'ignoreCase': 'v:true',
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_fuzzy'],
    \   'converters': ['converter_fuzzy'],
    \ },
    \ 'around': {
    \   'mark': 'A',
    \ },
    \ 'cmdline': {
    \   'mark': 'cmdline',
    \   'forceCompletionPattern': '\S/\S*',
    \ },
    \ 'nvim-lsp': {
    \   'mark': 'lsp',
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
    \ },
    \ 'file': {
    \   'mark': 'F',
    \   'isVolatile': v:true,
    \   'minAutoCompleteLength': 1000,
    \   'forceCompletionPattern': '\S/\S*'
    \ },
    \ 'rg': {
    \   'mark': 'rg',
    \   'matchers': ['matcher_fuzzy'],
    \   'minAutoCompleteLength': 4,
    \ },
    \ 'skkeleton': {
    \   'mark': 'SKK',
    \   'matchers': ['skkeleton'],
    \   'sorters': [],
    \   'minAutoCompleteLength': 2,
    \ },
    \ 'treesitter': {
    \   'mark': 'T',
    \   'matchers': ['matcher_head'],
    \ },
    \ })

call ddc#custom#patch_global('sourceParams', {
    \ 'nvim-lsp': { 'kindLabels': { 'Class': 'c' } },
    \ })

call ddc#custom#patch_global('filterParams', {
    \   'matcher_fuzzy': {'splitMode': 'character'}
    \ })

call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   'file': {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   'file': {
    \     'mode': 'win32',
    \   },
    \ },
    \ })

" Use pum.vim
call ddc#custom#patch_global('autoCompleteEvents', [
            \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
            \ 'CmdlineEnter', 'CmdlineChanged',
            \ ])
call ddc#custom#patch_global('completionMenu', 'pum.vim')

inoremap <expr><silent><C-n>    pum#visible() ?
    \ pum#map#insert_relative(+1) :
    \ ddc#map#manual_complete()
inoremap <expr><silent><C-p>    pum#visible() ?
    \ pum#map#insert_relative(-1) :
    \ ddc#map#manual_complete()
inoremap <C-e>      <Cmd>call pum#map#cancel()<CR>

call ddc#enable()
'''
hook_add = '''
nnoremap :  <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
    call dein#source('ddc.vim')

    " Note: It disables default command line completion!
    cnoremap <expr><silent><Tab>
    \ pum#visible() ? pum#map#insert_relative(+1) :
    \ ddc#manual_complete()
    cnoremap <silent><S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    set wildchar=<C-t>

    "Overwrite sourcves
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources', ['cmdline'])
    call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#]*')

    autocmd MyAutoCmd User DDCCmdlineLeave ++once call CommandLinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
    call ddc#enable()
endfunction

function! CommandLinePost() abort
    " Restore sources
	call ddc#custom#set_buffer(s:prev_buffer_config)
    silent! cunmap <Tab>
    set wildchar=<Tab>
endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
if has('nvim')
    call pum#set_option('border', 'rounded')
endif
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'delphinus/ddc-treesitter'
depends = 'nvim-treesitter'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
on_map = { ic = '<Plug>(skkeleton-toggle)' }
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
call skkeleton#config({
    \   'eggLikeNewline': v:true
    \ })
call skkeleton#config({
    \ 'globalJisyo': '~/.local/share/skk/SKK-JISYO.L',
    \ 'userJisyo': '~/.local/share/skk/skkeleton-user',
    \ 'completionRankFile': '~/.local/share/skk/rank.json',
    \ })

" expected ddc.vim is loaded
if dein#tap('ddc.vim')
  let ddc_sources = ddc#custom#get_global().sources
  if ( index(ddc_sources, 'skkeleton') == -1 )
    call add(ddc_sources, 'skkeleton')
    call ddc#custom#patch_global({ 'sources': ddc_sources })
  endif
endif
'''
