[[plugins]]
repo = 'neovim/nvim-lspconfig'
name = 'lspconfig'
if = 'has("nvim")'
on_event = 'BufReadPre'
hook_source = '''
lua << EOF
local lspconfig = require('lspconfig')
lspconfig.omnisharp.setup({})
lspconfig.dockerls.setup({})
lspconfig.yamlls.setup({})
lspconfig.sumneko_lua.setup {
  settings = {
    Lua = {
      runtime = {
        version = 'LuaJIT',
      },
      diagnostics = {
        globals = {'vim'},
      },
      workspace = {
        library = vim.api.nvim_get_runtime_file("", true),
      },
      telemetry = {
        enable = false,
      },
    },
  },
}
lspconfig.vimls.setup {}
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'lspconfig'
hook_source = '''
lua require('nvim-lsp-installer').setup()
'''

[[plugins]]
repo = 'folke/trouble.nvim'
depends = ['nvim-web-devicons', 'lsp-colors.nvim']
on_cmd = 'TroubleToggle'
hook_add = '''
function s:map_trouble_actions()
  nmap <buffer><silent> ;d          <Cmd>TroubleToggle<CR>
  nmap <buffer><silent> ;r          <Cmd>TroubleToggle lsp_references<CR>
  nmap <buffer><silent> <Leader>xw  <Cmd>TroubleToggle workspace_diagnostics<CR>
  nmap <buffer><silent> <Leader>xd  <Cmd>TroubleToggle document_diagnostics<CR>
  nmap <buffer><silent> <Leader>xq  <Cmd>TroubleToggle loclist<CR>
endfunction

autocmd NvimLspRc LspAttach * call <SID>map_trouble_actions()
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'LspAttach'
hook_source = '''
lua require('fidget').setup()
'''

[[plugins]]
repo = 'folke/lsp-colors.nvim'
on_event = 'LspAttach'
hook_source = '''
lua << EOF
require('lsp-colors').setup({
    Error = "#db4b4b",
    Warning = "#e0af68",
    Information = "#0db9d7",
    Hint = "#10B981"
})
'''

[[plugins]]
repo = 'smjonas/inc-rename.nvim'
on_cmd = 'IncRename'
hook_add = '''
function s:map_increname()
  nmap <Leader>r :IncRename<Space>
endfunction
autocmd NvimLspRc LspAttach * call <SID>map_increname()
'''
hook_source = '''
lua << EOF
require("inc_rename").setup()
EOF
'''
