[[plugins]]
repo = 'Shougo/ddc.vim'
if = 'g:vimrc#dein#use_ddc'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_source = '''
call ddc#custom#set_global(g:ddc_options)
call ddc#enable()
autocmd DdcRc CmdlineEnter * call ddc#enable_cmdline_completion()
'''
hook_add = '''
let g:ddc_options = {
      \ 'sources': [],
      \ 'cmdlineSources': [],
      \ 'sourceOptions': {},
      \ 'sourceParams': {},
      \ 'filterParams': {},
      \ 'autoCompleteEvents': [
      \   'InsertEnter', 'TextChangedI', 'TextChangedP',
      \   'CmdlineEnter', 'CmdlineChanged',
      \   ],
      \ }
augroup DdcRc
  autocmd!
augroup END
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
inoremap <expr><silent> <C-n> pum#visible() ? pum#map#insert_relative(+1) : ddc#map#manual_complete()
inoremap <expr><silent> <C-p> pum#visible() ? pum#map#insert_relative(-1) : ddc#map#manual_complete()
inoremap <C-e> <Cmd>call pum#map#cancel()<CR>
cnoremap <expr><silent> <Tab> pum#visible() ? pum#map#insert_relative(+1) : ddc#manual_complete()
cnoremap <silent> <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

augroup PumRc
  autocmd!
  autocmd CmdlineEnter * setlocal wildchar=<C-t>
  autocmd CmdlineEnter * setlocal wildcharm=<C-t>
augroup END

if has('nvim')
  call pum#set_option('border', 'rounded')
endif
let g:ddc_options['completionMenu'] = 'pum.vim'
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'
hook_source = '''
call insert(g:ddc_options['sources'], 'around')
let g:ddc_options['sourceOptions']['around'] = {
      \ 'mark': 'A',
      \ }
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'
hook_source = '''
call add(g:ddc_options['cmdlineSources'], 'cmdline')
let g:ddc_options['sourceOptions']['cmdline'] = {
      \ 'mark': 'cmdline',
      \ 'forceCompletionPattern': '\S/\S*',
      \ }
'''

[[plugins]]
repo = 'Shougo/ddc-rg'
if = 'executable("rg")'
on_source = 'ddc.vim'
hook_source = '''
let g:ddc_options['sourceOptions']['rg'] = {
      \ 'mark': 'rg',
      \ 'matchers': ['matcher_head'],
      \ 'minAutoCompleteLength': 4,
      \ }
nmap <expr> <Leader>,r vimrc#ddc#add_source_buffer('rg')
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
if = 'has("nvim")'
on_source = 'ddc.vim'
hook_source = '''
autocmd DdcRc LspAttach * call vimrc#ddc#insert_source_buffer('nvim-lsp')

let g:ddc_options['sourceOptions']['nvim-lsp'] = {
      \ 'mark': 'lsp',
      \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ }
let g:ddc_options['sourceParams']['nvim-lsp'] = {
      \ 'kindLabels': { 'Class': 'c' },
      \ }
'''

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'
hook_source = '''
call add(g:ddc_options['sources'], 'file')
let g:ddc_options['sourceOptions']['file'] = {
      \ 'mark': 'F',
      \ 'isVolatile': v:true,
      \ 'minAutoCompleteLength': 1000,
      \ 'forceCompletionPattern': '\S/\S*',
      \ }
'''

[[plugins]]
repo = 'delphinus/ddc-treesitter'
depends = 'nvim-treesitter'
on_source = 'ddc.vim'
hook_source = '''
let g:ddc_options['sourceOptions']['treesitter'] = {
      \ 'mark': 'T',
      \ 'matchers': ['matcher_head'],
      \ }
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
hook_source = '''
let g:ddc_options['sourceOptions']['_'] = {
      \ 'ignoreCase': v:true,
      \ 'matchers': ['matcher_fuzzy'],
      \ 'sorters': ['sorter_fuzzy'],
      \ 'converters': ['converter_fuzzy'],
      \ }
let g:ddc_options['filterParams']['matcher_fuzzy'] = {
      \ 'splitMode': 'character',
      \ }
'''

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
on_map = { ic = '<Plug>(skkeleton-toggle)' }
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
call skkeleton#config({
    \   'eggLikeNewline': v:true
    \ })
call skkeleton#config({
    \ 'globalJisyo': '~/.local/share/skk/SKK-JISYO.L',
    \ 'userJisyo': '~/.local/share/skk/skkeleton-user',
    \ 'completionRankFile': '~/.local/share/skk/rank.json',
    \ })

" expected ddc.vim is loaded
if dein#tap('ddc.vim')
  call add(g:ddc_options['sources'], 'skkeleton')
  let g:ddc_options['sourceOptions']['skkeleton'] = {
        \ 'mark': 'SKK',
        \ 'matchers': ['skkeleton'],
        \ 'sorters': [],
        \ 'minAutoCompleteLength': 2,
        \ }
  call ddc#custom#patch_global(g:ddc_options)
endif
'''
